{
  "openapi": "3.0.3",
  "info": {
    "title": "C4Engineering Service Catalog API",
    "description": "REST API for managing service catalog entries with Backstage compatibility",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5000/api",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/services": {
      "get": {
        "summary": "List all services",
        "description": "Retrieve all services with optional filtering",
        "parameters": [
          {
            "name": "team",
            "in": "query",
            "description": "Filter by owning team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "system",
            "in": "query", 
            "description": "Filter by system",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lifecycle",
            "in": "query",
            "description": "Filter by lifecycle stage",
            "schema": {
              "type": "string",
              "enum": ["experimental", "development", "production", "deprecated"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new service",
        "description": "Add a new service to the catalog",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "description": "Invalid service data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{serviceId}": {
      "get": {
        "summary": "Get service by ID",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          }
        }
      },
      "put": {
        "summary": "Update service",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path", 
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          }
        }
      },
      "delete": {
        "summary": "Delete service",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service deleted successfully"
          },
          "404": {
            "description": "Service not found"
          },
          "409": {
            "description": "Service has dependencies and cannot be deleted"
          }
        }
      }
    },
    "/services/{serviceId}/dependencies": {
      "get": {
        "summary": "Get service dependencies",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service dependency graph",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDependencies"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Service": {
        "type": "object",
        "required": ["id", "name", "type", "owner"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique service identifier"
          },
          "name": {
            "type": "string",
            "description": "Human-readable service name"
          },
          "description": {
            "type": "string",
            "description": "Service description"
          },
          "type": {
            "type": "string", 
            "enum": ["service", "website", "library"],
            "description": "Service type"
          },
          "owner": {
            "type": "string",
            "description": "Owning team identifier"
          },
          "repository": {
            "type": "string",
            "format": "uri",
            "description": "Source code repository URL"
          },
          "documentation": {
            "type": "string",
            "format": "uri", 
            "description": "Documentation URL"
          },
          "apiSpec": {
            "type": "string",
            "description": "API specification path or URL"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Service tags for categorization"
          },
          "lifecycle": {
            "type": "string",
            "enum": ["experimental", "development", "production", "deprecated"],
            "description": "Service lifecycle stage"
          },
          "system": {
            "type": "string",
            "description": "Parent system identifier"
          },
          "dependsOn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of service dependencies"
          },
          "providesApis": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "APIs provided by this service"
          },
          "consumesApis": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "APIs consumed by this service"
          },
          "metadata": {
            "$ref": "#/components/schemas/ServiceMetadata"
          }
        }
      },
      "ServiceMetadata": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string"
          },
          "healthCheckUrl": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "CreateServiceRequest": {
        "type": "object",
        "required": ["id", "name", "type", "owner"],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string", 
            "enum": ["service", "website", "library"]
          },
          "owner": {
            "type": "string"
          },
          "repository": {
            "type": "string",
            "format": "uri"
          },
          "documentation": {
            "type": "string",
            "format": "uri"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lifecycle": {
            "type": "string",
            "enum": ["experimental", "development", "production", "deprecated"]
          },
          "system": {
            "type": "string"
          }
        }
      },
      "UpdateServiceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "repository": {
            "type": "string",
            "format": "uri"
          },
          "documentation": {
            "type": "string",
            "format": "uri"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lifecycle": {
            "type": "string",
            "enum": ["experimental", "development", "production", "deprecated"]
          }
        }
      },
      "ServiceDependencies": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "dependents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          }
        }
      }
    }
  }
}